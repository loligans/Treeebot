using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Treeebot.Application.Configuration;
using Treeebot.Application.EventHandlers;
using TwitchLib.Api.Interfaces;
using TwitchLib.Client.Interfaces;
using TwitchLib.Client.Models;
using TwitchLib.PubSub.Interfaces;

namespace Treeebot.Application
{
    /// <summary>
    /// The background service in charge of handling events generated by Twitch's Api's
    /// </summary>
    internal class TreeebotHostedService : IHostedService
    {
        private readonly ILogger<TreeebotHostedService> _logger;
        private readonly IOptions<TwitchApiConfiguration> _twitchApiConfiguration;
        private readonly IOptions<TwitchIrcConfiguration> _twitchIrcConfiguration;
        private readonly ITwitchClient _twitchClient;
        private readonly ITwitchPubSub _twitchPubSub;
        private readonly ITwitchAPI _twitchApi;
        private readonly IChannelHandler _channelHandler;
        private readonly IChatHandler _chatHandler;
        private readonly IStreamHandler _streamHandler;
        private readonly ISubscriptionHandler _subscriptionHandler;

        public TreeebotHostedService(
            ILogger<TreeebotHostedService> logger,
            IOptions<TwitchApiConfiguration> twitchApiConfiguration,
            IOptions<TwitchIrcConfiguration> twitchIrcConfiguration,
            ITwitchClient twitchClient,
            ITwitchPubSub twitchPubSub,
            ITwitchAPI twitchApi,
            IChannelHandler channelHandler,
            IChatHandler chatHandler,
            IStreamHandler streamHandler,
            ISubscriptionHandler subscriptionHandler)
        {
            _logger = logger;
            _twitchApiConfiguration = twitchApiConfiguration;
            _twitchIrcConfiguration = twitchIrcConfiguration;
            _twitchClient = twitchClient;
            _twitchPubSub = twitchPubSub;
            _twitchApi = twitchApi;

            _channelHandler = channelHandler;
            _chatHandler = chatHandler;
            _streamHandler = streamHandler;
            _subscriptionHandler = subscriptionHandler;
        }

        /// <summary>
        /// Startup logic for initializing the bot
        /// </summary>
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogDebug("Treeebot started");
            // Connect to the Twitch chat client
            await StartTwitchChatClientAsync();

            InitializeTwitchApi();

            // Connect to the Twitch PubSub client
            await StartTwitchPubSubClientAsync();
        }

        /// <summary>
        /// Shutdown logic for terminating Treeebot
        /// </summary>
        public Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogDebug("Treeebot stopped");
            // Unsubscribe from events
            _channelHandler.Dispose();
            _chatHandler.Dispose();
            _streamHandler.Dispose();
            _subscriptionHandler.Dispose();
            
            // Close all connections to twitch
            _twitchClient.Disconnect();
            _twitchPubSub.Disconnect();

            return Task.CompletedTask;
        }

        private async Task StartTwitchChatClientAsync()
        {
            var twitchIrcConfiguration = _twitchIrcConfiguration.Value;

            // Retrieve authentication for the chat client
            var connectionCredentials = new ConnectionCredentials(twitchIrcConfiguration.UserId, twitchIrcConfiguration.UserOAuthPassword);
            
            // Connect to Twitch Irc chat
            _twitchClient.Initialize(connectionCredentials);
            _twitchClient.Connect();

            // Grab the channels to join from configuration
            var channels = twitchIrcConfiguration.Channels;
            if (channels is null) { throw new ArgumentNullException($"{nameof(channels)}"); }
            
            // Join the specified twitch channels after connecting to Irc
            await Task.Delay(2000); // hack because we cannot await _twitchClient.Connect()
            foreach (var channel in channels)
            {
                if (channel is null) { continue; }
                _twitchClient.JoinChannel(channel);
            }
        }

        private void InitializeTwitchApi()
        {
            var twitchApiConfiguration = _twitchApiConfiguration.Value;
            _twitchApi.Settings.ClientId = twitchApiConfiguration.ClientId;
            _twitchApi.Settings.Secret = twitchApiConfiguration.ClientSecret;
        }

        private async Task StartTwitchPubSubClientAsync()
        {
            // Send subscriptions after connecting
            _twitchPubSub.OnPubSubServiceConnected += (o, e) => _twitchPubSub.SendTopics();

            // Grab the channels to subscribe to from configuration
            var channels = _twitchIrcConfiguration.Value.Channels;
            if (channels is null) { throw new ArgumentNullException($"{nameof(channels)}"); }

            // Convert channel names to channel ids
            var users = await _twitchApi.V5.Users.GetUsersByNameAsync(channels.ToList());
            var channelIds = users.Matches.Select(user => user.Id);

            // Subscribe to all channel's user follows
            foreach (var channel in channelIds)
            {
                if (channel is null) { continue; }
                _twitchPubSub.ListenToFollows(channel);
            }

            _twitchPubSub.Connect();
        }
    }
}
